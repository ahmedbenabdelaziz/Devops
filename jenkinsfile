pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = 'finale-dockerhub'
        BACKEND_IMAGE_NAME = 'ahmedabdelaziz5357580/backend-app'
        FRONTEND_IMAGE_NAME = 'ahmedabdelaziz5357580/frontflutter-app'
        SSH_HOST = '54.83.76.180'  // j'utiliser 
        SSH_USER = 'ubuntu'        
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/ahmedbenabdelaziz/Devops.git', branch: 'main'
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    bat 'cd backend && npm install'  
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    bat 'cd frontend && flutter pub get'  
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    bat 'cd backend && npm test' 
                }
            }
        }

        stage('Run Frontend Tests') {
            steps {
                script {
                    bat 'cd frontend && flutter test' 
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    bat "docker build -t $BACKEND_IMAGE_NAME:latest ./backend"  
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    bat "docker build -t $FRONTEND_IMAGE_NAME:latest ./frontend"  
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin" 
                    }
                }
            }
        }

        stage('Push Backend to DockerHub') {
            steps {
                script {
                    bat "docker push $BACKEND_IMAGE_NAME:latest"  
                }
            }
        }

        stage('Push Frontend to DockerHub') {
            steps {
                script {
                    bat "docker push $FRONTEND_IMAGE_NAME:latest"  
                }
            }
        }

        // Déploiement du Backend sur le serveur Ubuntu en utilisant SSH avec la clé privée
        stage('Deploy Backend to Server') {
            steps {
                script {
                    // Utilisation de la clé SSH dans Jenkins pour se connecter à l'instance EC2
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sh '''
                            ssh -i $SSH_PRIVATE_KEY $SSH_USER@$SSH_HOST << 'EOF'
                            cd /home/ubuntu/backend-project
                            docker pull $BACKEND_IMAGE_NAME:latest
                            docker-compose up -d
                            EOF
                        '''
                    }
                }
            }
        }

        // Déploiement du Frontend sur le serveur Ubuntu en utilisant SSH avec la clé privée
        stage('Deploy Frontend to Server') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sh '''
                            ssh -i $SSH_PRIVATE_KEY $SSH_USER@$SSH_HOST << 'EOF'
                            cd /home/ubuntu/frontend-project
                            docker pull $FRONTEND_IMAGE_NAME:latest
                            docker-compose up -d
                            EOF
                        '''
                    }
                }
            }
        }

        // Tests unitaires via JUnit
        stage('JUnit Test') {
            steps {
                script {
                    bat 'cd backend && npm run test:ci'  
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline exécuté avec succès !"
        }
        failure {
            echo "Échec du pipeline, veuillez vérifier les logs."
        }
    }
}
