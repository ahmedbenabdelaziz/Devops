pipeline {
    agent any
//// deploiement SSH sur EC2 Ubuntu (Cloud aws), autres etapes sur mon pc Windows

    environment {
        DOCKER_HUB_CREDENTIALS = 'finale-dockerhub'
        BACKEND_IMAGE_NAME = 'ahmedabdelaziz5357580/backend-app'
        FRONTEND_IMAGE_NAME = 'ahmedabdelaziz5357580/frontflutter-app'
        SSH_HOST = '54.83.76.180'  // J'utilise ici une instance EC2 Ubuntu (AWS Cloud)
        SSH_USER = 'ubuntu'        
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/ahmedbenabdelaziz/Devops.git', branch: 'main'
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                script {
                    bat 'cd back && npm install' 
                }
            }
        }

        stage('Install Frontend Dependencies') {
            steps {
                script {
                    bat 'cd devopsfrnt && flutter pub get'  
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    bat 'cd back && npm test'  
                }
            }
        }

        stage('Run Frontend Tests') {
            steps {
                script {
                    bat 'cd devopsfrnt && flutter test'  
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    bat "docker build -t $BACKEND_IMAGE_NAME:latest ./mon-projetbackend" 
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    bat "docker build -t $FRONTEND_IMAGE_NAME:latest ./devopsfrnt"  
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"  // Sur Windows
                    }
                }
            }
        }

        stage('Push Backend to DockerHub') {
            steps {
                script {
                    bat "docker push $BACKEND_IMAGE_NAME:latest"  
                }
            }
        }

        stage('Push Frontend to DockerHub') {
            steps {
                script {
                    bat "docker push $FRONTEND_IMAGE_NAME:latest" 
                }
            }
        }

        // Déploiement Backend sur EC2 (Linux Ubuntu)
        stage('Deploy Backend to Server') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sh '''
                            ssh -i $SSH_PRIVATE_KEY $SSH_USER@$SSH_HOST << 'EOF'
                            cd /home/ubuntu/mon-projetbackend  # Vérifie le chemin sur ton serveur EC2
                            docker pull $BACKEND_IMAGE_NAME:latest
                            docker-compose up -d
                            EOF
                        '''
                    }
                }
            }
        }

        // Déploiement Frontend sur EC2 (Linux Ubuntu)
        stage('Deploy Frontend to Server') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-ssh-key', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                        sh '''
                            ssh -i $SSH_PRIVATE_KEY $SSH_USER@$SSH_HOST << 'EOF'
                            cd /home/ubuntu/devopsfrnt  # Vérifie le chemin sur ton serveur EC2
                            docker pull $FRONTEND_IMAGE_NAME:latest
                            docker-compose up -d
                            EOF
                        '''
                    }
                }
            }
        }

        // Tests unitaires via JUnit pour le Backend
        stage('JUnit Test') {
            steps {
                script {
                    bat 'cd back && npm run test:ci'  
                }
            }
        }
    }

    post {
        success {
            echo "success"
        }
        failure {
            echo "failure"
        }
    }
}
